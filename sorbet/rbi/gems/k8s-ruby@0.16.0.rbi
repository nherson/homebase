# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `k8s-ruby` gem.
# Please instead update this file by running `bin/tapioca gem k8s-ruby`.


# source://k8s-ruby//lib/k8s/ruby/version.rb#3
module K8s
  class << self
    # @param server [String] http/s URL
    # @param options [Hash] @see Transport.new
    # @return [K8s::Client]
    #
    # source://k8s-ruby//lib/k8s/client.rb#26
    def client(server, **options); end
  end
end

# Kube API definitions
#
# source://k8s-ruby//lib/k8s/api.rb#8
module K8s::API; end

# API types common to all apigroups/versions
#
# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1
#
# source://k8s-ruby//lib/k8s/api/metav1.rb#10
module K8s::API::MetaV1; end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#APIGroup
#
# source://k8s-ruby//lib/k8s/api/metav1/api_group.rb#14
class K8s::API::MetaV1::APIGroup < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def preferredVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def versions; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#APIGroupList
#
# source://k8s-ruby//lib/k8s/api/metav1/api_group.rb#21
class K8s::API::MetaV1::APIGroupList < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def groups; end
end

# structured list of available APIGroup versions
# groupVersion provided for convenience
#
# source://k8s-ruby//lib/k8s/api/metav1/api_group.rb#8
class K8s::API::MetaV1::APIGroupVersion < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def groupVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def version; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#APIResource
#
# source://k8s-ruby//lib/k8s/api/metav1/api_resource.rb#7
class K8s::API::MetaV1::APIResource < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def categories; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def group; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def kind; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def namespaced; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def shortNames; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def singularName; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def verbs; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def version; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#APIResourceList
#
# source://k8s-ruby//lib/k8s/api/metav1/api_resource.rb#20
class K8s::API::MetaV1::APIResourceList < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def groupVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def resources; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#Initializer
#
# source://k8s-ruby//lib/k8s/api/metav1/object.rb#17
class K8s::API::MetaV1::Initializer < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#Initializers
#
# source://k8s-ruby//lib/k8s/api/metav1/object.rb#22
class K8s::API::MetaV1::Initializers < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def pending; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def result; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#List
#
# source://k8s-ruby//lib/k8s/api/metav1/list.rb#14
class K8s::API::MetaV1::List < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def items; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def metadata; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#ListMeta
#
# source://k8s-ruby//lib/k8s/api/metav1/list.rb#7
class K8s::API::MetaV1::ListMeta < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def continue; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def resourceVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def selfLink; end
end

# common attributes shared by all object types
#
# source://k8s-ruby//lib/k8s/api/metav1/object.rb#48
class K8s::API::MetaV1::ObjectCommon < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def metadata; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#ObjectMeta
#
# source://k8s-ruby//lib/k8s/api/metav1/object.rb#28
class K8s::API::MetaV1::ObjectMeta < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def annotations; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def clusterName; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def creationTimestamp; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def deletionGracePeriodSeconds; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def deletionTimestamp; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def finalizers; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def generateName; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def generation; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def initializers; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def labels; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def namespace; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def ownerReferences; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def resourceVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def selfLink; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def uid; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#OwnerReference
#
# source://k8s-ruby//lib/k8s/api/metav1/object.rb#9
class K8s::API::MetaV1::OwnerReference < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def blockOwnerDeletion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def controller; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def uid; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#TypeMeta
#
# source://k8s-ruby//lib/k8s/api/metav1.rb#12
class K8s::API::MetaV1::Resource < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def apiVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def kind; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#Status
#
# source://k8s-ruby//lib/k8s/api/metav1/status.rb#7
class K8s::API::MetaV1::Status < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def code; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def details; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def message; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def metadata; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def reason; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def status; end
end

# structured cause
#
# source://k8s-ruby//lib/k8s/api/metav1/status.rb#9
class K8s::API::MetaV1::Status::Cause < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def field; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def message; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def reason; end
end

# structured details
#
# source://k8s-ruby//lib/k8s/api/metav1/status.rb#16
class K8s::API::MetaV1::Status::Details < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def causes; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def group; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def kind; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def retryAfterSeconds; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def uid; end
end

# @see https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1#WatchEvent
#
# source://k8s-ruby//lib/k8s/api/metav1/watch_event.rb#9
class K8s::API::MetaV1::WatchEvent < ::K8s::API::MetaV1::Resource
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def object; end

  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/api/metav1/watch_event.rb#14
  def resource; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def type; end
end

# Common API struct type, handling JSON transforms with symbol keys
#
# source://k8s-ruby//lib/k8s/api.rb#15
class K8s::API::Struct < ::Dry::Struct
  extend ::Dry::Core::DescendantsTracker

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/api.rb#26
  def to_json(*_args); end

  class << self
    # @param data [Hash]
    # @return [self]
    #
    # source://k8s-ruby//lib/k8s/api.rb#21
    def from_json(data); end
  end
end

# Common Dry::Types used in the API
#
# source://k8s-ruby//lib/k8s/api.rb#10
module K8s::API::Types
  extend ::Dry::Types::BuilderMethods
  extend ::Dry::Core::Deprecations::Interface

  mixes_in_class_methods ::Dry::Types::BuilderMethods
end

# GET /version
#
# source://k8s-ruby//lib/k8s/api/version.rb#6
class K8s::API::Version < ::K8s::API::Struct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def buildDate; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def compiler; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def gitCommit; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def gitTreeState; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def gitVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def major; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def minor; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def platform; end
end

# Per-APIGroup/version client.
#
# Offers access to {ResourceClient} instances for the APIResource types defined in this apigroup/version
#
# source://k8s-ruby//lib/k8s/api_client.rb#7
class K8s::APIClient
  # @param transport [K8s::Transport]
  # @param api_version [String] "group/version" or "version" (core)
  # @return [APIClient] a new instance of APIClient
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#20
  def initialize(transport, api_version); end

  # Cached APIResources
  #
  # @return [Array<K8s::API::MetaV1::APIResource>]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#53
  def api_resources; end

  # Force-update APIResources
  #
  # @return [Array<K8s::API::MetaV1::APIResource>]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#45
  def api_resources!; end

  # @param api_resources [Array<K8s::API::MetaV1::APIResource>]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#40
  def api_resources=(_arg0); end

  # @return [Bool] loaded yet?
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#35
  def api_resources?; end

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#26
  def api_version; end

  # @param resource [K8s::Resource]
  # @param namespace [String, nil] default if resource is missing namespace
  # @raise [K8s::Error::UndefinedResource]
  # @return [K8s::ResourceClient]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#80
  def client_for_resource(resource, namespace: T.unsafe(nil)); end

  # @param resource_name [String]
  # @raise [K8s::Error::UndefinedResource]
  # @return [K8s::API::MetaV1::APIResource]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#60
  def find_api_resource(resource_name); end

  # Pipeline list requests for multiple resource types.
  #
  # Returns flattened array with mixed resource kinds.
  #
  # @param resources [Array<K8s::ResourceClient>] default is all listable resources for api
  # @param options @see [K8s::ResourceClient#list]
  # @return [Array<K8s::Resource>]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#110
  def list_resources(resources = T.unsafe(nil), **options); end

  # @param path [Array<String>] join path from parts
  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#30
  def path(*path); end

  # @param resource_name [String]
  # @param namespace [String, nil]
  # @raise [K8s::Error::UndefinedResource]
  # @return [K8s::ResourceClient]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#72
  def resource(resource_name, namespace: T.unsafe(nil)); end

  # TODO: skip non-namespaced resources if namespace is given, or ignore namespace?
  #
  # @param namespace [String, nil]
  # @return [Array<K8s::ResourceClient>]
  #
  # source://k8s-ruby//lib/k8s/api_client.rb#96
  def resources(namespace: T.unsafe(nil)); end

  class << self
    # @param api_version [String] either core version (v1) or apigroup/apiversion (apps/v1)
    # @return [String]
    #
    # source://k8s-ruby//lib/k8s/api_client.rb#10
    def path(api_version); end
  end
end

# Top-level client wrapper.
# Uses a {Transport} instance to talk to the kube API.
# Offers access to {APIClient} and {ResourceClient} instances.
#
# source://k8s-ruby//lib/k8s/client.rb#33
class K8s::Client
  include ::MonitorMixin

  # @param transport [K8s::Transport]
  # @param namespace [String, nil] default namespace for all operations
  # @return [Client] a new instance of Client
  #
  # source://k8s-ruby//lib/k8s/client.rb#108
  def initialize(transport, namespace: T.unsafe(nil)); end

  # @param api_version [String] "group/version" or "version" (core)
  # @return [APIClient]
  #
  # source://k8s-ruby//lib/k8s/client.rb#124
  def api(api_version = T.unsafe(nil)); end

  # Cached /apis preferred group apiVersions
  #
  # @return [Array<String>]
  #
  # source://k8s-ruby//lib/k8s/client.rb#147
  def api_groups; end

  # Force-update /apis cache.
  # Required if creating new CRDs/apiservices.
  #
  # @return [Array<String>]
  #
  # source://k8s-ruby//lib/k8s/client.rb#132
  def api_groups!; end

  # @param api_versions [Array<String>] defaults to all APIs
  # @param prefetch_resources [Boolean] prefetch any missing api_resources for each api_version
  # @param skip_missing [Boolean] return APIClient without api_resources? if 404
  # @return [Array<APIClient>]
  #
  # source://k8s-ruby//lib/k8s/client.rb#155
  def apis(api_versions = T.unsafe(nil), prefetch_resources: T.unsafe(nil), skip_missing: T.unsafe(nil)); end

  # @param resource [K8s::Resource]
  # @param namespace [String, nil] default if resource is missing namespace
  # @raise [K8s::Error::NotFound] API Group does not exist
  # @raise [K8s::Error::UndefinedResource]
  # @return [K8s::ResourceClient]
  #
  # source://k8s-ruby//lib/k8s/client.rb#218
  def client_for_resource(resource, namespace: T.unsafe(nil)); end

  # @param resource [K8s::Resource]
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/client.rb#224
  def create_resource(resource); end

  # @param resource [K8s::Resource]
  # @param options [Hash]
  # @return [K8s::Resource]
  # @see ResourceClient#delete for options
  #
  # source://k8s-ruby//lib/k8s/client.rb#272
  def delete_resource(resource, **options); end

  # @param resource [K8s::Resource]
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/client.rb#230
  def get_resource(resource); end

  # Returns nils for any resources that do not exist.
  # This includes custom resources that were not yet defined.
  #
  # @param resources [Array<K8s::Resource>]
  # @return [Array<K8s::Resource, nil>] matching resources array 1:1
  #
  # source://k8s-ruby//lib/k8s/client.rb#239
  def get_resources(resources); end

  # Pipeline list requests for multiple resource types.
  #
  # Returns flattened array with mixed resource kinds.
  #
  # @param resources [Array<K8s::ResourceClient>] default is all listable resources for api
  # @param options @see K8s::ResourceClient#list
  # @return [Array<K8s::Resource>]
  #
  # source://k8s-ruby//lib/k8s/client.rb#198
  def list_resources(resources = T.unsafe(nil), **options); end

  # @param resource [K8s::Resource]
  # @param attrs [Hash]
  # @return [K8s::Client]
  #
  # source://k8s-ruby//lib/k8s/client.rb#279
  def patch_resource(resource, attrs); end

  # @param namespace [String, nil]
  # @return [Array<K8s::ResourceClient>]
  #
  # source://k8s-ruby//lib/k8s/client.rb#181
  def resources(namespace: T.unsafe(nil)); end

  # Returns the value of attribute transport.
  #
  # source://k8s-ruby//lib/k8s/client.rb#104
  def transport; end

  # @param resource [K8s::Resource]
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/client.rb#264
  def update_resource(resource); end

  # @raise [K8s::Error]
  # @return [K8s::API::Version]
  #
  # source://k8s-ruby//lib/k8s/client.rb#118
  def version; end

  class << self
    # Attempts to create a K8s::Client instance automatically using environment variables, existing configuration
    # files or in cluster configuration.
    #
    # Look-up order:
    #   - KUBE_TOKEN, KUBE_CA, KUBE_SERVER environment variables
    #   - KUBECONFIG environment variable
    #   - $HOME/.kube/config file
    #   - In cluster configuration
    #
    # Will raise when no means of configuration is available
    #
    # @param options [Hash] default namespace for all operations
    # @raise [K8s::Error::Config, Errno::ENOENT, Errno::EACCES]
    # @return [K8s::Client]
    #
    # source://k8s-ruby//lib/k8s/client.rb#70
    def autoconfig(namespace: T.unsafe(nil), **options); end

    # @param config [Phraos::Kube::Config]
    # @param namespace [String] @see #initialize
    # @param options [Hash] @see Transport.config
    # @return [K8s::Client]
    #
    # source://k8s-ruby//lib/k8s/client.rb#38
    def config(config, namespace: T.unsafe(nil), **options); end

    # An K8s::Client instance from in-cluster config within a kube pod, using the kubernetes service envs and serviceaccount secrets
    #
    # @param namespace [String] default namespace for all operations
    # @param options [Hash] options passed to transport, @see Transport#in_cluster_config
    # @raise [K8s::Error::Config, Errno::ENOENT, Errno::EACCES]
    # @return [K8s::Client]
    # @see K8s::Transport#in_cluster_config
    #
    # source://k8s-ruby//lib/k8s/client.rb#52
    def in_cluster_config(namespace: T.unsafe(nil), **options); end
  end
end

# @see https://godoc.org/k8s.io/client-go/tools/clientcmd/api/v1#Config
#
# source://k8s-ruby//lib/k8s/config.rb#25
class K8s::Config < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def apiVersion; end

  # @param name [String]
  # @return [K8s::Config::Cluster]
  #
  # source://k8s-ruby//lib/k8s/config.rb#201
  def cluster(name = T.unsafe(nil)); end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def clusters; end

  # @param name [String]
  # @raise [K8s::Error::Configuration]
  # @return [K8s::Config::Context]
  #
  # source://k8s-ruby//lib/k8s/config.rb#192
  def context(name = T.unsafe(nil)); end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def contexts; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def current_context; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def extensions; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def kind; end

  # Merges configuration according to the rules specified in
  # https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#merging-kubeconfig-files
  #
  # @param other [Hash, K8s::Config]
  # @return [K8s::Config]
  #
  # source://k8s-ruby//lib/k8s/config.rb#160
  def merge(other); end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def preferences; end

  # @param name [String]
  # @return [K8s::Config::User]
  #
  # source://k8s-ruby//lib/k8s/config.rb#207
  def user(name = T.unsafe(nil)); end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def users; end

  class << self
    # Build a minimal configuration from at least a server address, server certificate authority data and an access token.
    #
    # @param server [String] kubernetes server address
    # @param ca [String] server certificate authority data (base64 encoded)
    # @param token [String] access token
    # @param cluster_name [String] cluster name
    # @param user [String] user name
    # @param context [String] context name
    # @param options [Hash] (see #initialize)
    #
    # source://k8s-ruby//lib/k8s/config.rb#144
    def build(server:, ca:, auth_token:, cluster_name: T.unsafe(nil), user: T.unsafe(nil), context: T.unsafe(nil), **options); end

    # Loads configuration files listed in KUBE_CONFIG environment variable and
    # merge using the configuration merge rules, @see K8s::Config.merge
    #
    # @param kubeconfig [String] by default read from ENV['KUBECONFIG']
    # @raise [ArgumentError]
    #
    # source://k8s-ruby//lib/k8s/config.rb#124
    def from_kubeconfig_env(kubeconfig = T.unsafe(nil)); end

    # Loads a configuration from a YAML file
    #
    # @param path [String]
    # @return [K8s::Config]
    #
    # source://k8s-ruby//lib/k8s/config.rb#113
    def load_file(path); end
  end
end

# structured cluster
#
# source://k8s-ruby//lib/k8s/config.rb#32
class K8s::Config::Cluster < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def certificate_authority; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def certificate_authority_data; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def extensions; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def insecure_skip_tls_verify; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def server; end
end

# structured context
#
# Referrs to other named User/cluster objects within the same config.
#
# source://k8s-ruby//lib/k8s/config.rb#87
class K8s::Config::Context < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def cluster; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def extensions; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def namespace; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def user; end
end

# structured cluster with name
#
# source://k8s-ruby//lib/k8s/config.rb#41
class K8s::Config::NamedCluster < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def cluster; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end
end

# named context
#
# source://k8s-ruby//lib/k8s/config.rb#95
class K8s::Config::NamedContext < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def context; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end
end

# structured user with name
#
# source://k8s-ruby//lib/k8s/config.rb#79
class K8s::Config::NamedUser < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def user; end
end

# Common dry-types for config
#
# source://k8s-ruby//lib/k8s/config.rb#27
class K8s::Config::Types
  extend ::Dry::Types::BuilderMethods
  extend ::Dry::Core::Deprecations::Interface
end

# structured user
#
# source://k8s-ruby//lib/k8s/config.rb#61
class K8s::Config::User < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def as; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def as_groups; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def as_user_extra; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def auth_provider; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def client_certificate; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def client_certificate_data; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def client_key; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def client_key_data; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def exec; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def extensions; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def password; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def token; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def tokenFile; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def username; end
end

# structured user auth provider
#
# source://k8s-ruby//lib/k8s/config.rb#47
class K8s::Config::UserAuthProvider < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def config; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def name; end
end

# structured user exec
#
# source://k8s-ruby//lib/k8s/config.rb#53
class K8s::Config::UserExec < ::K8s::ConfigStruct
  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def apiVersion; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def args; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def command; end

  # source://dry-struct/1.6.0/lib/dry/struct/class_interface.rb#484
  def env; end
end

# Common struct type for kubeconfigs:
#
# * converts string keys to symbols
# * normalizes foo-bar to foo_bar
#
# source://k8s-ruby//lib/k8s/config.rb#13
class K8s::ConfigStruct < ::Dry::Struct
  extend ::Dry::Core::DescendantsTracker
end

# Top-level class for all errors raised by this gem.
#
# source://k8s-ruby//lib/k8s/error.rb#7
class K8s::Error < ::StandardError; end

# Kube API error, related to a HTTP response with a non-2xx code
#
# source://k8s-ruby//lib/k8s/error.rb#9
class K8s::Error::API < ::K8s::Error
  extend ::Forwardable

  # @param method [Integer] HTTP request method
  # @param path [Integer] HTTP request path
  # @param code [Integer] HTTP response code
  # @param reason [String] HTTP response reason
  # @param status [K8s::API::MetaV1::Status]
  # @return [API] a new instance of API
  #
  # source://k8s-ruby//lib/k8s/error.rb#19
  def initialize(method, path, code, reason, status = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://k8s-ruby//lib/k8s/error.rb#12
  def code; end

  # Returns the value of attribute method.
  #
  # source://k8s-ruby//lib/k8s/error.rb#12
  def method; end

  # Returns the value of attribute path.
  #
  # source://k8s-ruby//lib/k8s/error.rb#12
  def path; end

  # Returns the value of attribute reason.
  #
  # source://k8s-ruby//lib/k8s/error.rb#12
  def reason; end

  # Returns the value of attribute status.
  #
  # source://k8s-ruby//lib/k8s/error.rb#12
  def status; end
end

# source://k8s-ruby//lib/k8s/error.rb#34
class K8s::Error::BadRequest < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#64
class K8s::Error::Configuration < ::K8s::Error; end

# XXX: also AlreadyExists?
#
# source://k8s-ruby//lib/k8s/error.rb#39
class K8s::Error::Conflict < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#36
class K8s::Error::Forbidden < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#46
K8s::Error::HTTP_STATUS_ERRORS = T.let(T.unsafe(nil), Hash)

# source://k8s-ruby//lib/k8s/error.rb#42
class K8s::Error::InternalError < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#40
class K8s::Error::Invalid < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#38
class K8s::Error::MethodNotAllowed < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#37
class K8s::Error::NotFound < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#44
class K8s::Error::ServerTimeout < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#43
class K8s::Error::ServiceUnavailable < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#41
class K8s::Error::Timeout < ::K8s::Error::API; end

# source://k8s-ruby//lib/k8s/error.rb#35
class K8s::Error::Unauthorized < ::K8s::Error::API; end

# Attempt to create a ResourceClient for an unknown resource type.
# The client cannot construct the correct API URL without having the APIResource definition.
#
# source://k8s-ruby//lib/k8s/error.rb#62
class K8s::Error::UndefinedResource < ::K8s::Error; end

# Logging utilities
#
# This provides a per-class Logger that uses the class name as a logging prefix.
# Instances can optionally also use logger! to define a per-instance Logger using a custom prefix.
#
# source://k8s-ruby//lib/k8s/logging.rb#10
module K8s::Logging
  extend ::K8s::Logging::ModuleMethods

  mixes_in_class_methods ::K8s::Logging::ModuleMethods
  mixes_in_class_methods ::K8s::Logging::ClassMethods

  # @return [Logger]
  #
  # source://k8s-ruby//lib/k8s/logging.rb#83
  def logger; end

  # Use per-instance logger instead of the default per-class logger
  #
  # Sets the instance variable returned by #logger
  #
  # @return [Logger]
  #
  # source://k8s-ruby//lib/k8s/logging.rb#73
  def logger!(progname: T.unsafe(nil), target: T.unsafe(nil), level: T.unsafe(nil), debug: T.unsafe(nil)); end

  class << self
    # extend class/intance methods for per-class logger
    #
    # source://k8s-ruby//lib/k8s/logging.rb#63
    def included(base); end
  end
end

# methods defined on each class including K8s::Logging
#
# source://k8s-ruby//lib/k8s/logging.rb#52
module K8s::Logging::ClassMethods
  # @return [Logger]
  #
  # source://k8s-ruby//lib/k8s/logging.rb#54
  def logger(target: T.unsafe(nil), level: T.unsafe(nil)); end
end

# Default log level: show warnings.
#
# Use K8s::Logging.quiet! to supress warnings.
# Note that the K8s::Transport defaults to quiet!
#
# source://k8s-ruby//lib/k8s/logging.rb#18
K8s::Logging::LOG_LEVEL = T.let(T.unsafe(nil), Integer)

# Default log target
#
# source://k8s-ruby//lib/k8s/logging.rb#12
K8s::Logging::LOG_TARGET = T.let(T.unsafe(nil), IO)

# methods defined on both the global K8s::Logging module, as well as class methods on each class including K8s::Logging
#
# source://k8s-ruby//lib/k8s/logging.rb#21
module K8s::Logging::ModuleMethods
  # Set log_level to Logger::DEBUG
  #
  # source://k8s-ruby//lib/k8s/logging.rb#34
  def debug!; end

  # global log_level shared across all including classes
  #
  # @return Logger::*
  #
  # source://k8s-ruby//lib/k8s/logging.rb#24
  def log_level; end

  # @param level Logger::*
  #
  # source://k8s-ruby//lib/k8s/logging.rb#29
  def log_level=(level); end

  # Set log_level to Logger::ERROR, surpressing any warnings logged by default
  #
  # source://k8s-ruby//lib/k8s/logging.rb#44
  def quiet!; end

  # Set log_level to Logger::INFO
  #
  # source://k8s-ruby//lib/k8s/logging.rb#39
  def verbose!; end
end

# generic untyped resource
#
# source://k8s-ruby//lib/k8s/resource.rb#10
class K8s::Resource < ::RecursiveOpenStruct
  include ::Comparable
  extend ::Forwardable

  # @param hash [Hash]
  # @param options [Hash] see RecursiveOpenStruct#initialize
  # @return [Resource] a new instance of Resource
  #
  # source://k8s-ruby//lib/k8s/resource.rb#44
  def initialize(hash, options = T.unsafe(nil)); end

  # @param other [K8s::Resource]
  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#57
  def <=>(other); end

  # @param config_annotation [String]
  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#104
  def can_patch?(config_annotation); end

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#76
  def checksum; end

  # Gets the existing resources (on kube api) configuration, an empty hash if not present
  #
  # @param config_annotation [String]
  # @return [Hash]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#91
  def current_config(config_annotation); end

  # merge in fields
  #
  # @param attrs [Hash, K8s::Resource]
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#65
  def merge(attrs); end

  # @param attrs [Hash]
  # @param config_annotation [String]
  # @return [Hash]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#83
  def merge_patch_ops(attrs, config_annotation); end

  # @param hash [Hash]
  # @return [Hash]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#110
  def stringify_hash(hash); end

  # @param args [Array] see Hash#to_json
  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource.rb#51
  def to_json(*args, **options); end

  class << self
    # @param filename [String] file path
    # @return [K8s::Resource]
    #
    # source://k8s-ruby//lib/k8s/resource.rb#25
    def from_file(filename); end

    # @param path [String] file path
    # @return [Array<K8s::Resource>]
    #
    # source://k8s-ruby//lib/k8s/resource.rb#31
    def from_files(path); end

    # @param data [String]
    # @return [self]
    #
    # source://k8s-ruby//lib/k8s/resource.rb#19
    def from_json(data); end
  end
end

# Per-APIResource type client.
#
# Used to get/list/update/patch/delete specific types of resources, optionally in some specific namespace.
#
# source://k8s-ruby//lib/k8s/resource_client.rb#7
class K8s::ResourceClient
  include ::K8s::ResourceClient::Utils
  extend ::K8s::ResourceClient::Utils

  # @param transport [K8s::Transport]
  # @param api_client [K8s::APIClient]
  # @param api_resource [K8s::API::MetaV1::APIResource]
  # @param namespace [String]
  # @param resource_class [Class]
  # @return [ResourceClient] a new instance of ResourceClient
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#70
  def initialize(transport, api_client, api_resource, namespace: T.unsafe(nil), resource_class: T.unsafe(nil)); end

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#88
  def api_version; end

  # @return [Bool]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#141
  def create?; end

  # @param resource [#metadata] with metadata.namespace and metadata.name set
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#147
  def create_resource(resource); end

  # @param name [String]
  # @param namespace [String, nil]
  # @param propagationPolicy [String, nil] The propagationPolicy to use for the API call. Possible values include “Orphan”, “Foreground”, or “Background”
  # @return [K8s::API::MetaV1::Status]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#311
  def delete(name, namespace: T.unsafe(nil), propagationPolicy: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#303
  def delete?; end

  # @param namespace [String, nil]
  # @param labelSelector [nil, String, Hash{String => String}]
  # @param fieldSelector [nil, String, Hash{String => String}]
  # @param propagationPolicy [String, nil]
  # @return [Array<Object>] array of instances of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#327
  def delete_collection(namespace: T.unsafe(nil), labelSelector: T.unsafe(nil), fieldSelector: T.unsafe(nil), propagationPolicy: T.unsafe(nil)); end

  # @param resource [resource_class] with metadata
  # @param options [Hash]
  # @return [K8s::API::MetaV1::Status]
  # @see #delete for possible options
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#345
  def delete_resource(resource, **options); end

  # @param name [String]
  # @param namespace [String, NilClass]
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#164
  def get(name, namespace: T.unsafe(nil)); end

  # @return [Bool]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#157
  def get?; end

  # @param resource [resource_class]
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#174
  def get_resource(resource); end

  # @param name [String]
  # @param ops [Hash] json-patch operations
  # @param namespace [String, nil]
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#292
  def json_patch(name, ops, namespace: T.unsafe(nil)); end

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#112
  def kind; end

  # @param labelSelector [nil, String, Hash{String => String}]
  # @param fieldSelector [nil, String, Hash{String => String}]
  # @param namespace [nil, String]
  # @return [Array<Object>] array of instances of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#200
  def list(labelSelector: T.unsafe(nil), fieldSelector: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # @return [Bool]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#183
  def list?; end

  # @param name [String]
  # @param obj [#to_json]
  # @param namespace [String, nil]
  # @param strategic_merge [Boolean] use kube Strategic Merge Patch instead of standard Merge Patch (arrays of objects are merged by name)
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#278
  def merge_patch(name, obj, namespace: T.unsafe(nil), strategic_merge: T.unsafe(nil)); end

  # @param labelSelector [nil, String, Hash{String => String}]
  # @param fieldSelector [nil, String, Hash{String => String}]
  # @param namespace [nil, String]
  # @return [K8s::API::MetaV1::List]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#209
  def meta_list(labelSelector: T.unsafe(nil), fieldSelector: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # @return [String] resource or resource/subresource
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#93
  def name; end

  # @return [String, nil]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#98
  def namespace; end

  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#120
  def namespaced?; end

  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#269
  def patch?; end

  # @param name [NilClass, String]
  # @param subresource [String, NilClass]
  # @param namespace [String, NilClass]
  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#128
  def path(name = T.unsafe(nil), subresource: T.unsafe(nil), namespace: T.unsafe(nil)); end

  # @param list [K8s::API::MetaV1::List]
  # @return [Array<Object>] array of instances of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#189
  def process_list(list); end

  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#101
  def resource; end

  # @return [class] K8s::Resource
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#117
  def resource_class; end

  # @return [String, nil]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#109
  def subresource; end

  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#104
  def subresource?; end

  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#253
  def update?; end

  # @param resource [#metadata] with metadata.resourceVersion set
  # @return [Object] instance of resource_class
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#259
  def update_resource(resource); end

  # @param labelSelector [nil, String, Hash{String => String}]
  # @param fieldSelector [nil, String, Hash{String => String}]
  # @param resourceVersion [nil, String]
  # @param timeout [nil, Integer]
  # @raise [Excon::Error]
  # @yield [K8S::API::MetaV1::WatchEvent]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#227
  def watch(labelSelector: T.unsafe(nil), fieldSelector: T.unsafe(nil), resourceVersion: T.unsafe(nil), timeout: T.unsafe(nil), namespace: T.unsafe(nil)); end

  class << self
    # Pipeline list requests for multiple resource types.
    #
    # Returns flattened array with mixed resource kinds.
    #
    # @param resources [Array<K8s::ResourceClient>]
    # @param transport [K8s::Transport]
    # @param namespace [String, nil]
    # @param labelSelector [nil, String, Hash{String => String}]
    # @param fieldSelector [nil, String, Hash{String => String}]
    # @param skip_forbidden [Boolean] skip resources that return HTTP 403 errors
    # @return [Array<K8s::Resource>]
    #
    # source://k8s-ruby//lib/k8s/resource_client.rb#50
    def list(resources, transport, namespace: T.unsafe(nil), labelSelector: T.unsafe(nil), fieldSelector: T.unsafe(nil), skip_forbidden: T.unsafe(nil)); end
  end
end

# Common helpers used in both class/instance methods
#
# source://k8s-ruby//lib/k8s/resource_client.rb#9
module K8s::ResourceClient::Utils
  # @param options [Hash]
  # @return [Hash, NilClass]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#27
  def make_query(options); end

  # @param selector [NilClass, String, Hash{String => String}]
  # @return [NilClass, String]
  #
  # source://k8s-ruby//lib/k8s/resource_client.rb#12
  def selector_query(selector); end
end

# source://k8s-ruby//lib/k8s/ruby/version.rb#4
class K8s::Ruby; end

# Updated on releases using semver.
#
# source://k8s-ruby//lib/k8s/ruby/version.rb#6
K8s::Ruby::VERSION = T.let(T.unsafe(nil), String)

# Usage: customize the LABEL and CHECKSUM_ANNOTATION
#
# source://k8s-ruby//lib/k8s/stack.rb#7
class K8s::Stack
  include ::K8s::Logging
  extend ::K8s::Logging::ModuleMethods
  extend ::K8s::Logging::ClassMethods

  # @param name [String]
  # @param resources [Array<K8s::Resource>]
  # @param debug [Boolean]
  # @param label [String]
  # @param checksum_annotation [String]
  # @param last_config_annotation [String]
  # @return [Stack] a new instance of Stack
  #
  # source://k8s-ruby//lib/k8s/stack.rb#61
  def initialize(name, resources = T.unsafe(nil), debug: T.unsafe(nil), label: T.unsafe(nil), checksum_annotation: T.unsafe(nil), last_configuration_annotation: T.unsafe(nil)); end

  # @param client [K8s::Client]
  # @return [Array<K8s::Resource>]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#97
  def apply(client, prune: T.unsafe(nil), patch: T.unsafe(nil)); end

  # Delete all stack resources
  #
  # @param client [K8s::Client]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#183
  def delete(client); end

  # key MUST NOT include resource.apiVersion: the same kind can be aliased in different APIs
  #
  # @param resource [K8s::Resource]
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#126
  def keep_resource!(resource); end

  # @param resource [K8s::Resource]
  # @return [Boolean]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#132
  def keep_resource?(resource); end

  # Returns the value of attribute name.
  #
  # source://k8s-ruby//lib/k8s/stack.rb#53
  def name; end

  # @param resource [K8s::Resource] to apply
  # @param base_resource [K8s::Resource] DEPRECATED
  # @return [K8s::Resource]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#76
  def prepare_resource(resource, base_resource: T.unsafe(nil)); end

  # Delete all stack resources that were not applied
  #
  # @param client [K8s::Client]
  # @param keep_resources [NilClass, Boolean]
  # @param skip_forbidden [Boolean]
  #
  # source://k8s-ruby//lib/k8s/stack.rb#143
  def prune(client, keep_resources:, skip_forbidden: T.unsafe(nil)); end

  # Returns the value of attribute resources.
  #
  # source://k8s-ruby//lib/k8s/stack.rb#53
  def resources; end

  class << self
    # @param name [String] unique name for stack
    # @param path [String] load resources from YAML files
    # @param client [K8s::Client] apply using client
    # @param prune [Boolean] delete old resources
    # @param options [Hash] see Stack#initialize
    # @return [K8s::Stack]
    #
    # source://k8s-ruby//lib/k8s/stack.rb#41
    def apply(name, path, client, prune: T.unsafe(nil), **options); end

    # Remove any installed stack resources.
    #
    # @param name [String] unique name for stack
    # @param client [K8s::Client] apply using client
    #
    # source://k8s-ruby//lib/k8s/stack.rb#49
    def delete(name, client, **options); end

    # @param name [String] unique name for stack
    # @param path [String] load resources from YAML files
    # @param options [Hash] see Stack#initialize
    # @return [K8s::Stack]
    #
    # source://k8s-ruby//lib/k8s/stack.rb#30
    def load(name, path, **options); end
  end
end

# Annotation used to identify resource versions
#
# source://k8s-ruby//lib/k8s/stack.rb#14
K8s::Stack::CHECKSUM_ANNOTATION = T.let(T.unsafe(nil), String)

# Label used to identify resources belonging to this stack
#
# source://k8s-ruby//lib/k8s/stack.rb#11
K8s::Stack::LABEL = T.let(T.unsafe(nil), String)

# Annotation used to identify last applied configuration
#
# source://k8s-ruby//lib/k8s/stack.rb#17
K8s::Stack::LAST_CONFIG_ANNOTATION = T.let(T.unsafe(nil), String)

# List of apiVersion:kind combinations to skip for stack prune
# These would lead to stack prune misbehaving if not skipped.
#
# source://k8s-ruby//lib/k8s/stack.rb#21
K8s::Stack::PRUNE_IGNORE = T.let(T.unsafe(nil), Array)

# Excon-based HTTP transport handling request/response body JSON encoding
#
# source://k8s-ruby//lib/k8s/transport.rb#9
class K8s::Transport
  include ::K8s::Logging
  extend ::K8s::Logging::ModuleMethods
  extend ::K8s::Logging::ClassMethods

  # @param server [String] URL with protocol://host:port (paths are preserved as well)
  # @param auth_token [String] optional Authorization: Bearer token
  # @param auth_username [String] optional Basic authentication username
  # @param auth_password [String] optional Basic authentication password
  # @param options [Hash] @see Excon.new
  # @return [Transport] a new instance of Transport
  #
  # source://k8s-ruby//lib/k8s/transport.rb#162
  def initialize(server, auth_token: T.unsafe(nil), auth_username: T.unsafe(nil), auth_password: T.unsafe(nil), **options); end

  # @return [Excon::Connection]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#180
  def build_excon; end

  # @return [Excon::Connection]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#175
  def excon; end

  # @param options [Hash] as passed to Excon#request
  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#220
  def format_request(options); end

  # @param path [Array<String>] @see #path
  # @param options [Hash] @see #request
  # @return [Array<response_class, Hash, NilClass>]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#372
  def get(*path, **options); end

  # @param paths [Array<String>]
  # @param options [Hash] @see #request
  # @return [Array<response_class, Hash, NilClass>]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#380
  def gets(*paths, **options); end

  # @return [Boolean] true if delete options should be sent as bode of the DELETE request
  #
  # source://k8s-ruby//lib/k8s/transport.rb#365
  def need_delete_body?; end

  # Returns the value of attribute options.
  #
  # source://k8s-ruby//lib/k8s/transport.rb#155
  def options; end

  # @param response [Hash] as returned by Excon#request
  # @param request_options [Hash] as passed to Excon#request
  # @param response_class [Class] coerce into response body using #new
  # @raise [K8s::Error]
  # @raise [Excon::Error] TODO: wrap
  # @return [response_class, Hash]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#242
  def parse_response(response, request_options, response_class: T.unsafe(nil)); end

  # @param parts [Array<String>] join path parts together to build the full URL
  # @return [String]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#192
  def path(*parts); end

  # Returns the value of attribute path_prefix.
  #
  # source://k8s-ruby//lib/k8s/transport.rb#155
  def path_prefix; end

  # @param response_class [Class] coerce into response class using #new
  # @param options [Hash] @see Excon#request
  # @return [response_class, Hash]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#285
  def request(response_class: T.unsafe(nil), **options); end

  # @param request_object [Object] include request body using to_json
  # @param content_type [String] request body content-type
  # @param options [Hash] @see Excon#request
  # @return [Hash]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#201
  def request_options(request_object: T.unsafe(nil), content_type: T.unsafe(nil), **options); end

  # @param options [Array<Hash>] @see #request
  # @param skip_missing [Boolean] return nil for HTTP 404 responses
  # @param skip_forbidden [Boolean] return nil for HTTP 403 responses
  # @param retry_errors [Boolean] retry with non-pipelined request for HTTP 503 responses
  # @param common_options [Hash] @see #request, merged with the per-request options
  # @return [Array<response_class, Hash, NilClass>]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#316
  def requests(*options, skip_missing: T.unsafe(nil), skip_forbidden: T.unsafe(nil), retry_errors: T.unsafe(nil), **common_options); end

  # Returns the value of attribute server.
  #
  # source://k8s-ruby//lib/k8s/transport.rb#155
  def server; end

  # @return [K8s::API::Version]
  #
  # source://k8s-ruby//lib/k8s/transport.rb#357
  def version; end

  class << self
    # Construct transport from kubeconfig
    #
    # @param config [K8s::Config]
    # @param server [String] override cluster.server from config
    # @param overrides @see #initialize
    # @return [K8s::Transport]
    #
    # source://k8s-ruby//lib/k8s/transport.rb#34
    def config(config, server: T.unsafe(nil), **overrides); end

    # In-cluster config within a kube pod, using the kubernetes service envs and serviceaccount secrets
    #
    # @param options [Hash] see #new
    # @raise [K8s::Error::Config] when the environment variables KUBERNETES_SEVICE_HOST and KUBERNETES_SERVICE_PORT_HTTPS are not set
    # @raise [Errno::ENOENT, Errno::EACCES] when /var/run/secrets/kubernetes.io/serviceaccount/ca.crt or /var/run/secrets/kubernetes.io/serviceaccount/token can not be read
    # @return [K8s::Transport]
    #
    # source://k8s-ruby//lib/k8s/transport.rb#133
    def in_cluster_config(**options); end

    # @param auth_provider [K8s::Config::UserAuthProvider]
    # @return [String]
    #
    # source://k8s-ruby//lib/k8s/transport.rb#96
    def token_from_auth_provider(auth_provider); end

    # @param exec_conf [K8s::Config::UserExec]
    # @return [String]
    #
    # source://k8s-ruby//lib/k8s/transport.rb#112
    def token_from_exec(exec_conf); end
  end
end

# Min version of Kube API for which delete options need to be sent as request body
#
# source://k8s-ruby//lib/k8s/transport.rb#26
K8s::Transport::DELETE_OPTS_BODY_VERSION_MIN = T.let(T.unsafe(nil), Gem::Version)

# Excon middlewares for requests
#
# source://k8s-ruby//lib/k8s/transport.rb#15
K8s::Transport::EXCON_MIDDLEWARES = T.let(T.unsafe(nil), Array)

# Default request headers
#
# source://k8s-ruby//lib/k8s/transport.rb#21
K8s::Transport::REQUEST_HEADERS = T.let(T.unsafe(nil), Hash)

# Miscellaneous helpers
#
# source://k8s-ruby//lib/k8s/util.rb#5
module K8s::Util
  class << self
    # Yield with all non-nil args, returning matching array with corresponding return values or nils.
    #
    # Args must be usable as hash keys. Duplicate args will all map to the same return value.
    #
    # @param args [Array<nil, Object>]
    # @return [Array<nil, Object>] matching args array 1:1, containing yielded values for non-nil args
    # @yield args
    # @yieldparam args [Array<Object>] omitting any nil values
    #
    # source://k8s-ruby//lib/k8s/util.rb#69
    def compact_map(args); end

    # Produces a set of json-patch operations so that applying
    # the operations on a, gives you the results of b
    # Used in correctly patching the Kube resources on stack updates
    #
    # @param patch_to [Hash] Hash to compute patches against
    # @param patch_from [Hash] New Hash to compute patches "from"
    #
    # source://k8s-ruby//lib/k8s/util.rb#100
    def json_patch(patch_to, patch_from); end

    # Recursive compact for Hash/Array
    #
    # @param hash_or_array [Hash, Array]
    # @return [Hash, Array]
    #
    # source://k8s-ruby//lib/k8s/util.rb#84
    def recursive_compact(hash_or_array); end
  end
end

# source://k8s-ruby//lib/k8s/util.rb#6
module K8s::Util::HashDeepMerge; end

# source://k8s-ruby//lib/k8s/util.rb#59
K8s::Util::PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://k8s-ruby//lib/k8s/util.rb#58
K8s::Util::PATH_TR_MAP = T.let(T.unsafe(nil), Hash)
